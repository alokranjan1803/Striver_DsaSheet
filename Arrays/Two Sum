// BRUTE FORCE

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        vector<int> ans;

        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                if(nums[i] + nums[j] == target){
                    ans.push_back(i);
                    ans.push_back(j);
                }
            }
        }
        return ans;
    }
};

// T.C - O(N*N)
// S.C - O(1)


// OPTIMAL APPROACH

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> mp;
        
        for(int i=0; i<nums.size(); i++){
            int req = target-nums[i];
            if(mp.find(req) != mp.end()){
                return {i, mp[req]};
            }
            mp[nums[i]] = i;
        }
        return {};
    }
};

// T.C - O(N)
// S.C -O(1)
