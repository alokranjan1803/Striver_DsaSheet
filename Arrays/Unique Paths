// RECURSIVE APPROACH

class Solution {
public:
    int uniquePathsHelper(int i, int j, int m, int n){
        if(i==m-1 && j == n-1){
            // we reach at target
            return 1;
        }
        if(i>m || i<0 || j<0 || j>n){
            return 0;
        }

        int rightMove = uniquePathsHelper(i, j+1, m, n);
        int downMove = uniquePathsHelper(i+1, j, m, n);

        int ans = rightMove + downMove;

        return ans;
    }

    int uniquePaths(int m, int n) {

        return uniquePathsHelper(0, 0, m, n);
        
    }
};


// TOP- DOWN APPROACH

class Solution {
public:
    int uniquePathsHelper(int i, int j, int m, int n, vector<vector<int>>& dp){
        if(i==m-1 && j == n-1){
            // we reach at target
            return 1;
        }
        if(i>m || i<0 || j<0 || j>n){
            return 0;
        }

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        int rightMove = uniquePathsHelper(i, j+1, m, n, dp);
        int downMove = uniquePathsHelper(i+1, j, m, n, dp);

        dp[i][j] = rightMove + downMove;

        return dp[i][j];
    }

    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1, vector<int> (n+1, -1));
        return uniquePathsHelper(0, 0, m, n, dp);
        
    }
};

// BOTTOM - UP


class Solution {
public:
    int uniquePathsHelper( int m, int n, vector<vector<int>>& dp){
        
        dp[m-1][n-1] = 1;
        for(int i=m-1; i>=0; i--){
            for(int j=n-1; j>=0; j--){
                int rightMove = (j+1 < n) ? dp[i][j+1] : 0;
                int downMove = (i+1 < m) ? dp[i+1] [j] : 0;

                if(i == m-1 && j == n-1){
                    continue;
                }

                dp[i][j] = rightMove + downMove;

            }
        }
        

        

        return dp[0][0];
    }

    int uniquePaths(int m, int n) {
        
        vector<vector<int>> dp(m+1, vector<int> (n+1, 0));
        
        return uniquePathsHelper( m, n, dp);
        
    }
};

