
// USING Hash FUNCTION
vector<int> Solution::repeatedNumber(const vector<int> &arr) {
    int n = arr.size();
    int hash[n+1] = {0};
        
        for(int i=0; i<n; i++){
            hash[arr[i]]++;
        }
        
        int missingEle = -1;
        int repeatingEle = -1;
        for(int i=1; i<=n; i++){
            if(hash[i] == 2){
                repeatingEle = i;
            }
            
            else if(hash[i] == 0){
                missingEle = i;
            }
            
            if(repeatingEle != -1 && missingEle != -1){
                break;
            }
        }
        return {repeatingEle, missingEle};
}

// T.C - O(2*N)
// S.C - O(N)



// USING BIT MANIPULATION
vector<int> Solution::repeatedNumber(const vector<int> &arr) {
        int n = arr.size();
        int x = 0;
        
        for(int i=0; i<n; i++){
            x ^= arr[i];
            x ^= (i+1);
        }
        
        int setBit = x & (~(x-1));
        vector<int> ans(2);
        ans[0] = 0; // bit set (repeating)
        ans[1] = 0; // bit not set (missing)
        
        for(int i=0; i<n; i++){
            if(arr[i] & setBit){
                ans[0] ^= arr[i];
            }
            else{
                ans[1] ^= arr[i];
                
            }
            
            if((i+1) & setBit){
                    ans[0] ^= (i+1);
            }
            else{
                    ans[1] ^= (i+1);
            }
        }
        
        for(int i=0; i<n; i++){
            if(arr[i] == ans[0]){
                break;
            }
            if(arr[i] == ans[1]){
                swap(ans[0], ans[1]);
                break;
            }
        }
        return ans;
}

// T.C - O(N)
// S.C - O(1)
