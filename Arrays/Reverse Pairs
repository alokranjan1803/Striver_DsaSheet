class Solution {
public:
    void merge(vector<int>& nums, int low, int high, int mid, int& count){
        int j = mid+1;
        for(int i=low; i<=mid; i++){
            while(j<=high && nums[i] > 2*(long long)nums[j]){
                j++;
            }
            count += j-(mid+1);
        }
        int len = high-low+1;
        vector<int> temp(len, 0);
        int left = low;
        int right = mid+1; 
        int k = 0;

        while(left<=mid && right<=high){
            if(nums[left] < nums[right]){
                temp[k++] = nums[left++];
            }
            else{
                temp[k++] = nums[right++];
            }
        }
        while(left<=mid){
            temp[k++] = nums[left++]; 
        }
        while(right<=high){
            temp[k++] = nums[right++]; 
        }
        int m=0;
        for(int i=low; i<=high; i++){
            nums[i] = temp[m++];
        }
    }

    void mergeSort(vector<int>& nums, int low, int high, int& count){
        if(low >= high){
            return;
        }
        int mid = (low+high)/2;
        mergeSort(nums, low, mid, count);
        mergeSort(nums, mid+1, high, count);
        merge(nums, low, high, mid, count);
    }

    int reversePairs(vector<int>& nums) {
        int rpCount = 0;
        mergeSort(nums, 0, nums.size()-1, rpCount);
        return rpCount;
    }
};

// T.C - O(N)
// S.C - O(N)
