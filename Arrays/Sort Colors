
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int oneCount = 0;
        int zeroCount = 0;
        int twoCount = 0;

        for(int i=0; i<nums.size(); i++){
            if(nums[i] == 0){
                zeroCount++;
            }
            else if(nums[i] == 1){
                oneCount++;
            }
            else{
                twoCount++;
            }
        }
        int index = 0;
        while(zeroCount--){
            nums[index] = 0;
            index++;
        }

        while(oneCount--){
            nums[index] = 1;
            index++;
        }

        while(twoCount--){
            nums[index] = 2;
            index++;
        }
    }
};

// T.C - O(2*N)
// S.C - O(1)


// OPTIMAL APPROACH


class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n = nums.size();
        int i=0; // denotes for 0
        int j=0; // denotes for 1
        int k = n-1; // denotes for 2

        while(j<=k){
            if(nums[j]==0){
                swap(nums[j], nums[i]);
                j++;
                i++;
            }
            else if(nums[j]==1){
                j++;
            }
            else{
                swap(nums[j], nums[k]);
                k--;
            }
        }
        
    }
};

// T.C - O(N)
// S.C - O(1)
