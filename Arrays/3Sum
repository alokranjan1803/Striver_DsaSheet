// BRUTE FORCE

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        set<vector<int>> unique;
        int n = nums.size();
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                for(int k=j+1; k<n; k++){
                    if(nums[i] + nums[j] + nums[k] == 0){
                        vector<int> temp = {nums[i], nums[j], nums[k]};
                        sort(temp.begin(), temp.end());
                        unique.insert(temp);
                    }
                }
            }
        }

        vector<vector<int>> res(unique.begin(), unique.end());
        return res;
        
    }
};

// T.C -  O(N3 * log(no. of unique triplets))
// S.C - O(2 * no. of the unique triplets)


// BETTER APPROACH

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        set<vector<int>> unique;
        int n = nums.size();
        for(int i=0; i<n; i++){
            set<int> hashSet;
            for(int j=i+1; j<n; j++){

                int third = -(nums[i] + nums[j]);

                if(hashSet.find(third) != hashSet.end()){
                    vector<int> temp = {nums[i], nums[j], third};
                    sort(temp.begin(), temp.end());
                    unique.insert(temp);
                }
                hashSet.insert(nums[j]);
            }

        }

        vector<vector<int>> res(unique.begin(), unique.end());
        return res;
        
    }
};

// T.C - O(N2 * log(no. of unique triplets))
// S.C - O(2 * no. of the unique triplets) + O(N)



// OPTIMAL APPROACH ( TWO POINTER APPROACH)


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        for(int i=0; i<n; i++){
            if(i>0 && nums[i] == nums[i-1]){
                continue;
            }
            int j = i+1;
            int k = n-1;

            while(j<k){
                int sum = nums[i] + nums[j] + nums[k];

                if(sum < 0){
                    j++;
                }
                else if(sum > 0){
                    k--;
                }
                else{
                    vector<int> temp = {nums[i], nums[j], nums[k]};
                    res.push_back(temp);
                    j++;
                    k--;

                    while(j<k && nums[j] == nums[j-1]){
                        j++;
                    }
                    while(j<k && nums[k] == nums[k+1]){
                        k--;
                    }
                }
            }

        }
        return res;
    }
};


// T.C - O(NlogN)+O(N2)
// S.C - O(no. of quadruplets)
