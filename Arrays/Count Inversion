class sol{
    public:

        long merge(vector<int>& arr, vector<int>& temp, int start, int mid, int end){
            int i= start;
            int j = mid+1;
            int k = start;
            long count = 0;
            while(i<-mid && j<=end){
                if(arr[i] <= arr[j]){
                    temp[k++] = arr[i++];
                }
                else{
                    // inversion count case arr[i]>arr[j]
                    temp[k++] = arr[j++];
                    count += mid+i-1;
                }
            }
            while(i<=mid){
                temp[k++] = arr[i++];
            }
            while(j<=end){
                temp[k++] = arr[j++];
            }
            while(start<=end){
                arr[start] = temp[start];
                ++start;
            }
            return count;
        }

        long mergeSort(vector<int>& arr, vector<int>& temp, int start, int end){
            if(start>=end){
                return 0;
            }
            int mid = start + (end-start)/2;
            long count = 0;
            count += mergeSort(arr, temp, start, mid);
            count += mergeSort(arr, temp, mid+1, end);
            count += merge(arr, temp, start, mid, end);
            return count;
        }

        long countInversion(vector<int> arr){
            long count = 0; // inversion count
            vector<int>temp(arr.size(), 0);
            count = mergeSort(arr, temp, 0, arr.size()-1);
            return count;
        }
};

// T.C - O(N*LOGN)
// S.C - O(1)




class Solution{
  public:
    // Function to merge two parts of the array and count inversions
    long long int merge(long long arr[], int l, int m, int r)
    {
        long long int count = 0;
        int len1 = m - l + 1;
        int len2 = r - m;

        // Dynamic allocation for temporary arrays
        long long *left = new long long[len1];
        long long *right = new long long[len2];

        // Copying data to temporary arrays left[] and right[]
        int k=l;
        for(int i = 0; i < len1; i++)
            left[i] = arr[k++];
            
        k = m+1;
        for(int j = 0; j < len2; j++)
            right[j] = arr[k++];

        // Merging the temporary arrays back into arr[l..r]
        int i = 0; // Initial index of first subarray
        int j = 0; // Initial index of second subarray
        int mainInd = l; // Initial index of merged subarray
        while (i < len1 && j < len2) {
            if (left[i] <= right[j]) {
                arr[mainInd] = left[i];
                i++;
            } else {
                arr[mainInd] = right[j];
                j++;
                count += (len1 - i); // Counting inversions
            }
            mainInd++;
        }

        // Copying the remaining elements of left[], if there are any
        while (i < len1) {
            arr[mainInd] = left[i];
            i++;
            mainInd++;
        }

        // Copying the remaining elements of right[], if there are any
        while (j < len2) {
            arr[mainInd] = right[j];
            j++;
            mainInd++;
        }

        // Free the memory allocated for temporary arrays
        delete[] left;
        delete[] right;

        return count;
    }

    // Function to implement merge sort and count inversions
    long long int mergeSort(long long arr[], int l, int r)
    {
        long long int count = 0;
        if (l < r) {
            // Same as (l+r)/2, but avoids overflow for large l and h
            int m = l + (r - l) / 2;

            // Count inversions in left and right halves and merge them
            count += mergeSort(arr, l, m);
            count += mergeSort(arr, m + 1, r);
            count += merge(arr, l, m, r);
        }
        return count;
    }

    // Function to count inversions in the array.
    long long int inversionCount(long long arr[], int n) {
        return mergeSort(arr, 0, n - 1);
    }
};
