// USING RECURSION

class Solution {
public:
    int minPathSumHelper(vector<vector<int>>& grid, int i, int j){
        // base case
        if(i==0 && j==0){
            return grid[0][0];
        }
        if(i<0 || j<0){
            return 1e9;
        }

        int up = grid[i][j] + minPathSumHelper(grid, i-1, j);
        int left = grid[i][j] + minPathSumHelper(grid, i, j-1);

        int ans = min(up, left);

        return ans;
    }

    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(); // no of row
        int n = grid[0].size(); // no of column
        
        int ans = minPathSumHelper(grid, m-1, n-1);
        return ans;
    }
};


// USING MEMOISATION TECHNIQUE

class Solution {
public:
    int minPathSumHelper(vector<vector<int>>& grid, int i, int j, vector<vector<int>>& dp){
        // base case
        if(i==0 && j==0){
            return grid[0][0];
        }
        if(i<0 || j<0){
            return 1e9;
        }

        // check if answer is already exist 
        if(dp[i][j] != -1){
            return dp[i][j];
        }

        int up = grid[i][j] + minPathSumHelper(grid, i-1, j, dp);
        int left = grid[i][j] + minPathSumHelper(grid, i, j-1, dp);

        int ans = min(up, left);
        // store ans in dp
        dp[i][j] = ans;

        return dp[i][j];
    }

    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(); // no of row
        int n = grid[0].size(); // no of column
        // create dp
        vector<vector<int>> dp(m+1, vector<int> (n+1, -1));
        
        int ans = minPathSumHelper(grid, m-1, n-1, dp);
        return ans;
    }
};

// T.C - O(N*M)
// S.C - O((M-1)+(N-1)) + O(N*M)

// SOLVE USING TABULATION

class Solution {
public:
    int minPathSumHelper(vector<vector<int>>& grid){
        int m = grid.size(); // no of row
        int n = grid[0].size(); // no of column
        
        // create dp
        vector<vector<int>> dp(m+1, vector<int> (n+1, 0));
        // observe base case
        dp[0][0] = grid[0][0];

        for(int i=1; i<m; i++){
            dp[i][0] = dp[i-1][0] + grid[i][0];

        }
        for(int j=1; j<n; j++){
            dp[0][j] = dp[0][j-1] + grid[0][j];
        }
        
        // reverse the flow of direction

        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                int up = grid[i][j] + dp[i-1][j];
                int left = grid[i][j] + dp[i][j-1];

                dp[i][j] = min(up, left);
                
            }
        }

        return dp[m-1][n-1];
    }

    int minPathSum(vector<vector<int>>& grid) {
        
        int ans = minPathSumHelper(grid);
        return ans;
    }
};

// T.C - O(N*M)
// S.C - O((M-1)+(N-1)) 



// SOLVE USING SPACE OPTIMISATION 1

class Solution {
public:
    int minPathSumHelperSo(vector<vector<int>>& grid) {
        int m = grid.size(); // number of rows
        int n = grid[0].size(); // number of columns

        // Create two vectors for the previous and current rows
        vector<int> prev(n+1, 0);
        vector<int> curr(n+1, 0);

        // Initialize the first element of the previous row
        prev[0] = grid[0][0];

        // Initialize the current row with values from the first row
        for (int j = 1; j < n; j++) {
            prev[j] = prev[j - 1] + grid[0][j];
        }

        // Build the DP array bottom-up
        for (int i = 1; i < m; i++) {
            // Update the first element of the current row
            curr[0] = prev[0] + grid[i][0];

            for (int j = 1; j < n; j++) {
                int up = grid[i][j] + prev[j];
                int left = grid[i][j] + curr[j-1];

                curr[j] = min(up, left);
            }

            // Update the previous row with the current row
            prev = curr;
        }

        return prev[n - 1];
    }

    int minPathSum(vector<vector<int>>& grid) {
        int ans = minPathSumHelperSo(grid);
        return ans;
    }
};

// T.C - O(N*M)
// S.C - O(N)

// SOLVE USING SPACE OPTIMISATION 2

class Solution {
public:
    int minPathSumHelperSo(vector<vector<int>>& grid) {
        int m = grid.size(); // number of rows
        int n = grid[0].size(); // number of columns

        // Create two vectors for the previous and current rows
        
        vector<int> curr(n+1, 0);

        // Initialize the first element of the previous row
        curr[0] = grid[0][0];

        // Initialize the current row with values from the first row
        for (int j = 1; j < n; j++) {
            curr[j] = curr[j - 1] + grid[0][j];
        }

        // Build the DP array bottom-up
        for (int i = 1; i < m; i++) {
            // Update the first element of the current row
            curr[0] = curr[0] + grid[i][0];

            for (int j = 1; j < n; j++) {
                int up = grid[i][j] + curr[j];
                int left = grid[i][j] + curr[j-1];

                curr[j] = min(up, left);
            }

            
        }

        return curr[n - 1];
    }

    int minPathSum(vector<vector<int>>& grid) {
        int ans = minPathSumHelperSo(grid);
        return ans;
    }
};

// T.C - O(N*M)
// S.C - O(N)
