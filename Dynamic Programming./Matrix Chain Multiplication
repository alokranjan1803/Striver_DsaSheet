// SOLVE USING RECURSION

class Solution{
public:
    
    int matrixMulHelper(int arr[], int &N, int i, int j){
        // base condition 
        if(i==j){
            return 0;
        }
        
        int mini = 1e9;
        
        // partioning loop
        for(int k=i; k<j; k++){
            int ans = matrixMulHelper(arr, N, i, k) + matrixMulHelper(arr, N, k+1, j) + arr[i-1]*arr[k]*arr[j];
            
            mini = min(mini, ans);
        }
        return mini;
    }
    
    int matrixMultiplication(int N, int arr[])
    {
        int i=1;
        int j=N-1;
        
        int ans = matrixMulHelper(arr, N, i, j);
        return ans;
        // code here
    }
};

// SOLVE USING MEMOISATION

class Solution{
public:
    
    int matrixMulHelper(int arr[], int &N, int i, int j, vector<vector<int>>& dp){
        // base condition 
        if(i==j){
            return 0;
        }
        
        int mini = 1e9;
        // check if answer is already exist
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        
        // partioning loop
        for(int k=i; k<j; k++){
            int ans = matrixMulHelper(arr, N, i, k, dp) + matrixMulHelper(arr, N, k+1, j, dp) + arr[i-1]*arr[k]*arr[j];
            
            mini = min(mini, ans);
        }
        // store ans in dp
        dp[i][j] = mini;
        return dp[i][j];
    }
    
    int matrixMultiplication(int N, int arr[])
    {
        int i=1;
        int j=N-1;
        // create dp
        vector<vector<int>> dp(N+1, vector<int> (N+1, -1));
        
        int ans = matrixMulHelper(arr, N, i, j, dp);
        return ans;
        // code here
    }
};

//T.C - O(N*N*N)
// S.C - O(N*N) + O(N)

// SOLVE USING TABULATION

class Solution{
public:
    
    int matrixMulHelper(int arr[], int &N){
        // create dp
        vector<vector<int>> dp(N+1, vector<int> (N+1, 0));
        
        
        
        
        // partioning loop
        for(int i=N-1; i>=1; i--){
            for (int j=i+1; j<N; j++){
                int mini = 1e9;
                for(int k=i; k<j; k++){
                        int ans = dp[i][k] + dp[k+1][j] + arr[i-1]*arr[k]*arr[j];
                    
                    mini = min(mini, ans);
                    
                }
                dp[i][j] = mini;
                
            }
        }
        // store ans in dp
        
        return dp[1][N-1];
    }
    
    int matrixMultiplication(int N, int arr[])
    {
        
        
        int ans = matrixMulHelper(arr, N);
        return ans;
        // code here
    }
};

//T.C - O(N*N*N)
// S.C - O(N*N)
