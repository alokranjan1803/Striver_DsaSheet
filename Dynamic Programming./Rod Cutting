// SOLVE USING RECURSION

class Solution {
public:

    int minCostHelper(int i, int j, vector<int>& cuts){
        if (j < i+2){
            return 0;
        }
        int mini = INT_MAX;

        for(int ind=i+1; ind<j; ind++){
            int cost = cuts[j] - cuts[i] + minCostHelper(i, ind, cuts) + minCostHelper(ind, j, cuts);
            mini = min(cost, mini);
        }
        return mini;
    }
    int minCost(int n, vector<int>& cuts) {
        cuts.push_back(n);
        cuts.insert(cuts.begin(), 0);
        sort(cuts.begin(), cuts.end());
        return minCostHelper(0, cuts.size()-1, cuts);
        
    }
};


// SOLVE USING MEMOISATION

class Solution {
public:

    int minCostHelper(int i, int j, vector<int>& cuts, vector<vector<int>>& dp){
        if (j < i+2){
            return 0;
        }

        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int mini = INT_MAX;

        for(int ind=i+1; ind<j; ind++){
            int cost = cuts[j] - cuts[i] + minCostHelper(i, ind, cuts, dp) + minCostHelper(ind, j, cuts, dp);
            mini = min(cost, mini);
        }
        dp[i][j] = mini;
        return dp[i][j];
    }
    int minCost(int n, vector<int>& cuts) {
        cuts.push_back(n);
        cuts.insert(cuts.begin(), 0);
        sort(cuts.begin(), cuts.end());
        vector<vector<int>> dp(cuts.size()+1, vector<int> (cuts.size()+1, -1));
        return minCostHelper(0, cuts.size()-1, cuts, dp);
        
    }
};


// SOLVE USING TABULATION




class Solution {
public:
    int minCost(int n, vector<int>& cuts) {
        cuts.push_back(0);
        cuts.push_back(n);
        sort(cuts.begin(), cuts.end());

        int m = cuts.size();
        vector<vector<int>> dp(m, vector<int>(m, 0));

        for (int len = 2; len < m; len++) {
            for (int i = 0; i + len < m; i++) {
                int j = i + len;
                dp[i][j] = INT_MAX;

                for (int ind = i + 1; ind < j; ind++) {
                    int cost = cuts[j] - cuts[i] + dp[i][ind] + dp[ind][j];
                    dp[i][j] = min(dp[i][j], cost);
                }
            }
        }

        return dp[0][m - 1];
    }
};


