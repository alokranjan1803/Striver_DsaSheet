/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    
    static bool comp(Job a, Job b){
        return (a.profit>b.profit);
    }
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
         vector<int> ans;
        sort(arr, arr+n, comp);
        
        int maxi = arr[0].dead;
        
        for(int i=0; i<n; i++){
            maxi = max(maxi, arr[i].dead);
        }
        
        vector<int> slot(maxi+1, -1);
             
        int countJobs = 0;
        int profitJobs = 0;
        for(int i=0; i<n; i++){
            for(int j=arr[i].dead; j>0; j--){
                if(slot[j] == -1){
                    countJobs++;
                    profitJobs += arr[i].profit;
                    slot[j] = i;
                    break;
                }
            }
        }
        ans.push_back(countJobs);
        ans.push_back(profitJobs);
        return ans;
        
        // your code here
    } 
};
