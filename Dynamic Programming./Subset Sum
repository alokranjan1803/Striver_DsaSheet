// SOLVE USING RECURSION

class Solution {
public:


    bool solveRec(int index, vector<int>& nums, int target){
        // base case
        if(index>=nums.size()){
            return false;
        }
        if(target<0){
            return false;
        }
        if(target==0){
            return true;
        }
        // include
        bool include = solveRec(index+1, nums, target-nums[index] );
        // exclude
        bool exclude = solveRec(index+1, nums, target);

        return (include|| exclude );

    }
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        int n = nums.size();
        // find the sum of element in array
        for(int i=0; i<n; i++ ){
            sum += nums[i];

        }
        // sum is odd then simply return false;
        if(sum&1){
            return false;
        }
        // find target
        int target = sum/2;
        int index = 0;

        bool ans = solveRec(index, nums, target );
        return ans;
    }
};



// SOLVE USING MEMOISATION

class Solution {
public:


    bool topDown(int index, vector<int>& nums, int target, vector<vector<int>>& dp){
        // base case
        if(index>=nums.size()){
            return false;
        }
        if(target<0){
            return false;
        }
        if(target==0){
            return true;
        }
        // check if answer is already exists
        if(dp[index][target] !=-1){
            return dp[index][target];
        }
        // include
        bool include = topDown(index+1, nums, target-nums[index] , dp);
        // exclude
        bool exclude = topDown(index+1, nums, target, dp);
        // store ans in dp array
        dp[index][target] = include||exclude;



        return dp[index][target];

    }
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        int n = nums.size();
        // find the sum of element in array
        for(int i=0; i<n; i++ ){
            sum += nums[i];

        }
        // sum is odd then simply return false;
        if(sum&1){
            return false;
        }
        // find target
        int target = sum/2;
        int index = 0;
        // create dp array
        vector<vector<int>> dp(nums.size(), vector<int>(target+1, -1));
        bool ans = topDown(index, nums, target, dp);
        return ans;
    }
};


// T.C - O(N*M)
// S.C - O(N*M) + O(N)


// SOLVE USING TABULATION

class Solution {
public:

    bool solveTab( vector<int>& nums, int target){
        int n = nums.size();
        // create dp array
        vector<vector<int>> dp(nums.size()+1, vector<int>(target+1, 0));

        // observe base case
        for(int i=0; i<nums.size(); i++){
            dp[i][0] = 1;
        }
        // reverse the flow of top down
        for(int index=n-1; index>=0; index--){
            for(int t=1; t<=target; t++){
                bool include = 0;
                if(t-nums[index]>=0){
                    include = dp[index+1][t-nums[index]];
         
                }
                bool exclude = dp[index+1][t];
                dp[index][t] = include||exclude;

            }
        }
        return dp[0][target];
    }
    
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        int n = nums.size();
        // find the sum of element in array
        for(int i=0; i<n; i++ ){
            sum += nums[i];

        }
        // sum is odd then simply return false;
        if(sum&1){
            return false;
        }
        // find target
        int target = sum/2;
        int index = 0;
        bool ans = solveTab(nums, target);
        return ans;
        
    }
};


// T.C - O(N*M)
// S.C - O(N*M)


// SOLVE USING SPACE OPTIMISATION

class Solution {
public:

    bool spaceOpt( vector<int>& nums, int target){
        int n = nums.size();
        // create dp array
        vector<int> curr(target+1, 0);
        vector<int> next(target+1, 0);
        
        curr[0] = 1;
        next[0] = 1;
        for(int i=0; i<nums.size(); i++){
            next[0] = 1;
        }
        // reverse the flow of top down
        for(int index=n-1; index>=0; index--){
            for(int t=1; t<=target; t++){
                bool include = 0;
                if(t-nums[index]>=0){
                    include = next[t-nums[index]];
         
                }
                bool exclude = next[t];
                curr[t] = include||exclude;

            }
            // shifting logic
            next = curr;
        }
        return next[target];
    }
    
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        int n = nums.size();
        // find the sum of element in array
        for(int i=0; i<n; i++ ){
            sum += nums[i];

        }
        // sum is odd then simply return false;
        if(sum&1){
            return false;
        }
        // find target
        int target = sum/2;
        int index = 0;
        bool ans = spaceOpt(nums, target);
        return ans;
        
    }
};

// T.C - O(N*M)
// S.C - O(M)
