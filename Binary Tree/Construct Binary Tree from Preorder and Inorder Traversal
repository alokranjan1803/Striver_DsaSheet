/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int, int> mapping;
    TreeNode* buildTreeHelper(vector<int>& inorder, vector<int>& preorder, int preStart, int preEnd, int inStart, int inEnd){
        if(preStart > preEnd || inStart > inEnd){
            return NULL;
        }

        TreeNode* root = new TreeNode(preorder[preStart++]);
        int pos = mapping[root->val];
        int numsLeft = pos - inStart;

        root->left = buildTreeHelper(inorder, preorder, preStart , preStart+numsLeft, inStart, pos-1);
        root->right = buildTreeHelper(inorder, preorder, preStart + numsLeft , preEnd, pos+1, inEnd);
        return root;
    }   

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {     
        

        for(int i=0; i<=inorder.size()-1; i++){
            mapping[inorder[i]] = i;
        }
        
        int preStart = 0;
        int preEnd = preorder.size()-1;
        int inStart = 0;
        int inEnd = inorder.size()-1;
        
        TreeNode* root = buildTreeHelper(inorder, preorder, preStart , preEnd, inStart, inEnd );
        return root;
    }
};
