/*
    Following is Binary Tree Node structure:
    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
    };
*/

void allTraversal(TreeNode* root, vector<int>& preorder, vector<int>& inorder, vector<int>& postorder){
    stack<pair<TreeNode*, int>> st;
    st.push({root, 1});

    
    if(root == NULL){
        return;
    }
    

    while(!st.empty()){
        auto temp = st.top();
        st.pop();

        if(temp.second == 1){
            preorder.push_back(temp.first->data);
            temp.second++;
            st.push(temp);

            if(temp.first->left != NULL){
                st.push({temp.first->left, 1});
            }
        }

        else if(temp.second == 2){
            inorder.push_back(temp.first->data);
            temp.second++;
            st.push(temp);

            if(temp.first->right != NULL ){
                st.push({temp.first->right, 1});
            }
        }

        else{
            postorder.push_back(temp.first->data);
        }
    }
    
}

vector<vector<int>> getTreeTraversal(TreeNode *root){
    vector<vector<int>> ans;
    vector<int> preorder;
    vector<int> inorder;
    vector<int> postorder;

    

    
    allTraversal(root, preorder, inorder, postorder);
    ans.push_back(inorder);
    ans.push_back(preorder);
    ans.push_back(postorder);

    return ans;
    // Write your code here.
}
