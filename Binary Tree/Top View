/*
struct Node
{
    int data;
    Node* left;
    Node* right;
};
*/
class Solution
{
    public:
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    
    void topViewHelper(Node* root, vector<int>& ans){
        // base case 
        if(root == NULL){
            return;
        }
        
        map<int,int>topNode;
        queue<pair<Node*, int>> q;
        q.push(make_pair(root, 0));
        
        while(!q.empty()){
            auto temp = q.front();
            q.pop();
            Node* fNode = temp.first;
            int hd = temp.second;
            
            if(topNode.find(hd) == topNode.end()){
                topNode[hd] = fNode->data;
            }
            
            if(fNode->left){
                q.push(make_pair(fNode->left, hd-1));
            }
            
            if(fNode->right){
                q.push(make_pair(fNode->right, hd+1));
            }
        }
        
        for(auto it:topNode){
            ans.push_back(it.second);
        }
    }
    
    vector<int> topView(Node *root)
    {
        vector<int> ans;
        topViewHelper(root, ans);
        return ans;
        //Your code here
    }

};

