/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    unordered_map<int, int> mapping;
    TreeNode* buildTreeHelper(vector<int>& inorder, vector<int>& postorder, int inStart, int inEnd, int postStart, int postEnd){
        if(inStart > inEnd || postStart > postEnd){
            return NULL;
        }

        TreeNode* root = new TreeNode(postorder[postEnd]);
        int pos = mapping[postorder[postEnd]];
        int numsLeft = pos - inStart;

        root->left = buildTreeHelper(inorder, postorder, inStart, pos-1, postStart, postStart+numsLeft-1);
        root->right = buildTreeHelper(inorder, postorder, pos+1, inEnd, postStart+numsLeft, postEnd-1);

        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        
        for(int i=0; i<inorder.size(); i++){
            mapping[inorder[i]] = i;
        }
        int inStart = 0;
        int inEnd = inorder.size()-1;
        int postStart = 0;
        int postEnd = postorder.size()-1;
                
        return  buildTreeHelper(inorder, postorder, inStart, inEnd, postStart, postEnd);



        
    }
};
