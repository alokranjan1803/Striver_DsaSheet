class TrieNode{
    public:
    char data;
    TrieNode* children[26];
    bool isTerminal;

    TrieNode(char d) {
        this->data = d;
        for(int i=0; i<26; i++){
            children[i] = NULL;
        }
        this->isTerminal = false;


        
    }

};

class Trie {
public:
    Trie(){
        root = new TrieNode('\0');
    }

    TrieNode* root;
    
    void insertWord(TrieNode* root, string word) {
        // base case
        if(word.length() == 0){
            root->isTerminal = true;
            return;
        }
        char ch = word[0];
        int index = ch - 'a';
        TrieNode* child;

        // present
        if(root->children[index] != NULL){
            child = root->children[index];
        }

        else{
            // not present
            child = new TrieNode(ch);
            root->children[index] = child;
        }

        insertWord(child, word.substr(1));
        
    }

    bool searchWord(TrieNode* root, string word){
        // base case
        if(word.length() == 0){
            return root->isTerminal;
        }

        char ch = word[0];
        int index = ch - 'a';
        TrieNode* child;
        if(root->children[index] != NULL){
            child = root->children[index];
        }
        else{
            return false;
        }
        return searchWord(child, word.substr(1));
    }

    bool startWithWord(TrieNode* root, string word){
        // base case
        if(word.length() == 0){
            return true;
        }
        char ch = word[0];
        int index = ch - 'a';
        TrieNode* child;
        if(root->children[index] != NULL){
            child = root->children[index];
        }
        else{
            return false;
        }
        return startWithWord(child, word.substr(1));
    }

    void insert(string word){
        insertWord(root, word);
    }
    
    bool search(string word) {
        return searchWord(root, word);
    }
    
    bool startsWith(string prefix) {
        return startWithWord(root, prefix);
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
