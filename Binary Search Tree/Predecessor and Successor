struct Node
{
	int key;
	struct Node *left;
	struct Node *right;
	
	Node(int x){
	    key = x;
	    left = NULL;
	    right = NULL;
	}
};
*/

// This function finds predecessor and successor of key in BST.
// It sets pre and suc as predecessor and successor respectively
class Solution
{
    public:
    
    Node* findPredecessor(Node* root, int key){
        Node* pre = NULL;
        Node* curr = root;
        while(curr!=NULL){
            if(curr->key >= key){
                curr = curr->left;
            }
            else{
                pre = curr;
                curr = curr->right;
            }
        }
        return pre;
        
    }
    
    Node* findSuccessor(Node* root, int key){
        Node* succ = NULL;
        Node* curr = root;
        while(curr!=NULL){
            if(curr->key > key){
                succ = curr;
                curr = curr->left;
            }
            else{
                curr = curr->right;
            }
            
        }
        return succ;
    }
    
    void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
    {
        pre = findPredecessor(root, key);
        suc = findSuccessor(root, key);
        // Your code goes here
    }
};
