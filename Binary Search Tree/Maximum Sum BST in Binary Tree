/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    pair<int, pair<int, int>> largestBST(TreeNode* root, int &maxSum){
        // base case
        if(!root->left && !root->right){
            maxSum = max(maxSum, root->val);
            return make_pair(root->val, make_pair(root->val, root->val));
        }

        pair<int, pair<int, int>> leftAns = {0, {INT_MAX, INT_MIN}};
        pair<int, pair<int, int>> rightAns = {0, {INT_MAX, INT_MIN}};

        if(root->left){
            leftAns = largestBST(root->left, maxSum);
        }

        if(root->right){
             rightAns = largestBST(root->right, maxSum);
        }

        if(root->val > leftAns.second.second && root->val < rightAns.second.first){
            int currSum = leftAns.first + rightAns.first + root->val;

            maxSum = max(maxSum, currSum);

            return {currSum, {min(leftAns.second.first, root->val), max(rightAns.second.second, root->val)}};
        }

        else{
            return {0, {INT_MIN, INT_MAX}};
        }
    }

    int maxSumBST(TreeNode* root) {
        int maxSum = 0;

        largestBST(root, maxSum);
        return maxSum;
    }
};
