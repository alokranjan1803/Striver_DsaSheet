class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        // create min heap
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        
        // initialising dist list
        vector<int> dist(V, 1e9);
        dist[S] = 0;
        pq.push({0, S});
        
        // traverse all adjacent nodes
        while(!pq.empty()){
            auto fNode = pq.top();
            int node = fNode.second;
            int distNode = fNode.first;
            
            pq.pop();
            
            // check all adjacent node
            for(auto it : adj[node]){
                int nbr = it[0];
                int wt = it[1];
                if(distNode + wt < dist[nbr]){
                    dist[nbr] = distNode + wt;
                    pq.push({distNode+wt, nbr});
                }
            }
        }
        return dist;
        // Code here
    }
};
