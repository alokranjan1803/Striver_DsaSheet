/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* getMidlle(ListNode* &head){
        if(head == NULL){
            return NULL;
        }
        if(head->next == NULL){
            return head;
        }

        ListNode* slow = head;
        ListNode* fast = head->next;

        while(slow && fast){
            fast = fast->next;
            if(fast){
                fast = fast->next;
                slow = slow->next;
            }
        }
        return slow;
    }

    ListNode* reverse(ListNode* &head){
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* forward = NULL;

        while(curr){
            forward = curr->next;
            curr->next = prev;
            prev = curr;
            curr = forward;
        }
        return prev;
    }

    bool isPalindrome(ListNode* head) {
        
        if(head->next == NULL){
            return true;
        }

        ListNode* middleNode = getMidlle(head);

        ListNode* reverseHead = reverse(middleNode->next);

        middleNode->next = reverseHead;

        ListNode* temp1 = head;
        ListNode* temp2 = reverseHead;

        while(temp2){
            if(temp1->val != temp2->val){
                // not a palindrome
                return false;
            }
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
        return true;
    }
};
